{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass AuthInterceptor {\n  intercept(req, next) {\n    const accessToken = localStorage.getItem('accessToken');\n    if (accessToken) {\n      const clonedReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      return next.handle(clonedReq);\n    }\n    return next.handle(req);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)();\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});\nexport { AuthInterceptor };","map":{"version":3,"names":["AuthInterceptor","intercept","req","next","accessToken","localStorage","getItem","clonedReq","clone","setHeaders","Authorization","handle","factory","ɵfac"],"sources":["/Users/artur.zaiats/Documents/Projects/UrlWebApp/src/app/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const accessToken = localStorage.getItem('accessToken');\n\n    if (accessToken) {\n      const clonedReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n\n      return next.handle(clonedReq);\n    }\n\n    return next.handle(req);\n  }\n}\n"],"mappings":";AAIA,MACaA,eAAe;EAC1BC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAEvD,IAAIF,WAAW,EAAE;MACf,MAAMG,SAAS,GAAGL,GAAG,CAACM,KAAK,CAAC;QAC1BC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUN,WAAW;;OAEvC,CAAC;MAEF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,SAAS,CAAC;;IAG/B,OAAOJ,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC;EACzB;;AAfWF,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAAY,OAAA,EAAfZ,eAAe,CAAAa;AAAA;SAAfb,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}